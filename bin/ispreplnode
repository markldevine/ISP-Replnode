#!/usr/bin/env raku

use ISP::Server::Reporter;

class ISP-Replnode-statistics {

    has Int $!source-objs           = 0;
    has Int $.source-objs-delta     = 0;
    has Int $!last-source-objs      = -1;

    method source-objs (Int :$source-objs) {
        return $!source-objs        without $source-objs;
        $!last-source-objs          = $source-objs unless $!last-source-objs >= 0;
        $!source-objs-delta         = $source-objs - $!last-source-objs;
        $!source-objs               = $source-objs;
        $!last-source-objs          = $source-objs;
    }

    has Int $!target-objs           = 0;
    has Int $.target-objs-delta     = 0;
    has Int $!last-target-objs      = -1;

    method target-objs (Int :$target-objs) {
        return $!target-objs        without $target-objs;
        $!last-target-objs          = $target-objs unless $!last-target-objs >= 0;
        $!target-objs-delta         = $target-objs - $!last-target-objs;
        $!target-objs               = $target-objs;
        $!last-target-objs          = $target-objs;
    }

    has Int $!pending-objs          = 0;
    has Int $.pending-objs-delta    = 0;
    has Int $!last-pending-objs     = -1;

    method pending-objs () {
        $!pending-objs              = (self.source-objs - self.target-objs).abs;
        $!last-pending-objs         = $!pending-objs unless $!last-pending-objs >= 0;
        $!pending-objs-delta        = $!pending-objs - $!last-pending-objs;
        $!last-pending-objs         = $!pending-objs;
        return $!pending-objs
    }
}

class Reporter does ISP::Server::Reporter {

    has %!statistics;

    method process-rows (@replnodes) {
        my Str $node-name;                                  #                            Node Name: P_SSSSSS
        my Str $type;                                       #                                 Type: Bkup
        my Str $filespace;                                  #                       Filespace Name: /nfsmounts/P_SSSSSS
        my Str $fsid;                                       #                                 FSID: 1
        my Int $source-objs;                                # Objects on Source Replication Server: 440
        my Int $target-objs;                                # Objects on Target Replication Server: 436
        my Str $target-server;                              #            Target Replication Server: IIIIIIII05

        my $row;
        for @replnodes -> $replnode {
            $node-name              = Nil;  $node-name      = $replnode{'Node Name'}.Str                                                    if $replnode{'Node Name'};
            $type                   = Nil;  $type           = $replnode{'Type'}.Str                                                         if $replnode{'Type'};
            $filespace              = Nil;  $filespace      = $replnode{'Filespace Name'}.Str                                               if $replnode{'Filespace Name'};
            $fsid                   = Nil;  $fsid           = $replnode{'FSID'}.Str                                                         if $replnode{'FSID'};
            $source-objs            = 0;    $source-objs    = $replnode{'Objects on Source Replication Server'}.comb.grep(/\d/).join.Int    if $replnode{'Objects on Source Replication Server'};
            $target-objs            = 0;    $target-objs    = $replnode{'Objects on Target Replication Server'}.comb.grep(/\d/).join.Int    if $replnode{'Objects on Target Replication Server'};
            $target-server          = Nil;  $target-server  = $replnode{'Target Replication Server'}.Str                                    if $replnode{'Target Replication Server'};
            %!statistics{$node-name}{$fsid}{$type}          = ISP-Replnode-statistics.new   unless %!statistics{$node-name}{$fsid}{$type}:exists;
            %!statistics{$node-name}{$fsid}{$type}.source-objs(:$source-objs);
            %!statistics{$node-name}{$fsid}{$type}.target-objs(:$target-objs);
            $row                    = Array.new;
            $row.push:              $node-name;
            $row.push:              $type;
            $row.push:              $filespace;
            $row.push:              $fsid;
            $row.push:              %!statistics{$node-name}{$fsid}{$type}.source-objs.Str.flip.comb(3).join(',').flip;
            $row.push:              %!statistics{$node-name}{$fsid}{$type}.source-objs-delta.Str.flip.comb(3).join(',').flip;
            $row.push:              %!statistics{$node-name}{$fsid}{$type}.target-objs.Str.flip.comb(3).join(',').flip;
            $row.push:              %!statistics{$node-name}{$fsid}{$type}.target-objs-delta.Str.flip.comb(3).join(',').flip;
            $row.push:              %!statistics{$node-name}{$fsid}{$type}.pending-objs.Str.flip.comb(3).join(',').flip;
            my Rat $pc              = ($target-objs / $source-objs) * 100;
            if 99.9 < $pc < 100.0 {
                $pc                 = 99.9;
            }
            $row.push:              $pc.fmt("%.1f%%");
            $row.push:              $target-server;
            self.table.add-row: $row;
        }
    }
}

sub MAIN (
    Str:D   :$isp-server!,                          #= ISP server name
    Str:D   :$isp-admin!,                           #= ISP server name
    Int:D   :$interval      where * >= 5    = 58,   #= Refresh every --interval seconds (minimum 10s)
    Int:D   :$count                         = 1,    #= Number of refreshes (0 is infinity)
    Bool    :$grid,                                 #= Full table grid
    Bool    :$clear,                                #= Clear the screen with each iteration
    Str     :$node,                                 #= ISP NODE name or NODEGROUP
) {
    my @command         = ['QUERY', 'REPLNODE'];
    if $node {
        @command.push: $node;
    }
    else {
        @command.push: '*';
    }
    my @fields;
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Node Name'),        :alignment('l'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Type'),             :alignment('l'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Filespace Name'),   :alignment('l'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('FSID'),             :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Source Objs'),      :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Source Δ'),       :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Target Objs'),      :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Target Δ'),       :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Pending Objs'),     :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Completed'),        :alignment('r'));
    @fields.push:   ISP::Server::Reporter::Field.new(:name('Target Server'),    :alignment('l'));
    my $reporter    = Reporter.new(
                                    :$isp-server,
                                    :$isp-admin,
                                    :$count,
                                    :$grid,
                                    :$clear,
                                    :$interval,
                                    :title('IBM Spectrum Protect: ' ~ $isp-server ~ ' Node Replication'),
                                    :@command,
                                    :@fields,
                                    :sort-by('Node Name'),
                                  );
    $reporter.loop;
}

=finish
